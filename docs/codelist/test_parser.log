[==========] Running 19 tests from 1 test suite.
[----------] Global test environment set-up.
[----------] 19 tests from ParserTest
[ RUN      ] ParserTest.isEmptyInitially
[       OK ] ParserTest.isEmptyInitially (0 ms)
[ RUN      ] ParserTest.isGrammarLoadedCorrectly
Rules:
0: S -> <a> A
1: A -> <b>
2: A -> EPSILON
Rules:
0: E -> T A
1: A -> <\+> T A
2: A -> EPSILON
3: B -> <\*> F B
4: B -> EPSILON
5: F -> <\(> E <\)>
6: F -> N
7: N -> <[0-9]+>
8: T -> F B
[       OK ] ParserTest.isGrammarLoadedCorrectly (0 ms)
[ RUN      ] ParserTest.isFirstCorrect0
FIRST table:
S: <a>
A: EPSILON <b>
FIRST(S): [1, 1, <a>]
FIRST(A): [-1, -1, EPSILON] [3, 2, <b>]
FIRST(a): <a>

[       OK ] ParserTest.isFirstCorrect0 (0 ms)
[ RUN      ] ParserTest.isFollowEmptyCorrect
FOLLOW(epsilon): BOTTOM OF STACK
FOLLOW(a): BOTTOM OF STACK
[       OK ] ParserTest.isFollowEmptyCorrect (0 ms)
[ RUN      ] ParserTest.isFollowCorrect0
FOLLOW table:
S: BOTTOM OF STACK
A: BOTTOM OF STACK
FOLLOW(S): BOTTOM OF STACK
FOLLOW(A): BOTTOM OF STACK
[       OK ] ParserTest.isFollowCorrect0 (0 ms)
[ RUN      ] ParserTest.isFirstCorrect4_7
FIRST table:
S: <a> <i>
E: <b>
S': EPSILON <e>
[       OK ] ParserTest.isFirstCorrect4_7 (0 ms)
[ RUN      ] ParserTest.isFirstCorrect4_4
Rules:
0: E -> T E'
1: E' -> <\+> T E'
2: E' -> EPSILON
3: T -> F T'
4: T' -> <\*> F T'
5: T' -> EPSILON
6: F -> <\(> E <\)>
7: F -> <id>
FIRST table:
E: <id> <\(>
T: <\(> <id>
E': EPSILON <\+>
F: <id> <\(>
T': EPSILON <\*>
[       OK ] ParserTest.isFirstCorrect4_4 (0 ms)
[ RUN      ] ParserTest.isFollowCorrect4_4
Rules:
0: E -> T E'
1: E' -> <\+> T E'
2: E' -> EPSILON
3: T -> F T'
4: T' -> <\*> F T'
5: T' -> EPSILON
6: F -> <\(> E <\)>
7: F -> <id>
FOLLOW table:
E: <\)> BOTTOM OF STACK
T: <\)> BOTTOM OF STACK <\+>
E': BOTTOM OF STACK <\)>
F: <\+> BOTTOM OF STACK <\)> <\*>
T': <\+> BOTTOM OF STACK <\)>
[       OK ] ParserTest.isFollowCorrect4_4 (0 ms)
[ RUN      ] ParserTest.isFirstCorrect2
Rules:
0: E -> T A
1: A -> <\+> T A
2: A -> EPSILON
3: B -> <\*> F B
4: B -> EPSILON
5: F -> <\(> E <\)>
6: F -> N
7: N -> <[0-9]+>
8: T -> F B
variables:
[0, 0, E], [1, 1, T], [2, 2, A], [4, 3, B], [6, 4, F], [9, 5, N],
Terminals:
[-2, 0, BOTTOM OF STACK], [3, 1, <\+>], [5, 2, <\*>], [7, 3, <\(>], [8, 4, <\)>], [10, 5, <[0-9]+>],

FIRST table:
E: <[0-9]+> <\(>
T: <\(> <[0-9]+>
A: EPSILON <\+>
B: EPSILON <\*>
F: <[0-9]+> <\(>
N: <[0-9]+>

Target FIRST(A):
A: +,EPSILON
T: (, [0-9]
B: *,EPSILON
F: (, [0-9]
E: (, [0-9]
N: [0-1]

FIRST(A): [10, 5, <[0-9]+>] [7, 3, <\(>]
[       OK ] ParserTest.isFirstCorrect2 (0 ms)
[ RUN      ] ParserTest.isFollowCorrect2
Rules:
0: E -> T A
1: A -> <\+> T A
2: A -> EPSILON
3: B -> <\*> F B
4: B -> EPSILON
5: F -> <\(> E <\)>
6: F -> N
7: N -> <[0-9]+>
8: T -> F B
FOLLOW table:
E: <\)> BOTTOM OF STACK
T: BOTTOM OF STACK <\)> <\+>
A: BOTTOM OF STACK <\)>
B: <\+> <\)> BOTTOM OF STACK
F: <\+> BOTTOM OF STACK <\)> <\*>
N: <\*> <\)> BOTTOM OF STACK <\+>
[       OK ] ParserTest.isFollowCorrect2 (0 ms)
[ RUN      ] ParserTest.isMakeTableCorrect1
Rules:
0: S -> <a> A
1: A -> <b>
2: A -> EPSILON
FIRST table:
S: <a>
A: EPSILON <b>
FOLLOW table:
S: BOTTOM OF STACK
A: BOTTOM OF STACK
VARIABLE         BOTTOM OF STACK  <a>              <b>
S                error            S -> <a> A       error
A                A -> EPSILON     error            A -> <b>
[       OK ] ParserTest.isMakeTableCorrect1 (0 ms)
[ RUN      ] ParserTest.isMakeTableCorrect4_4
Rules:
0: E -> T E'
1: E' -> <\+> T E'
2: E' -> EPSILON
3: T -> F T'
4: T' -> <\*> F T'
5: T' -> EPSILON
6: F -> <\(> E <\)>
7: F -> <id>

FIRST table:
E: <id> <\(>
T: <\(> <id>
E': EPSILON <\+>
F: <id> <\(>
T': EPSILON <\*>

FOLLOW table:
E: <\)> BOTTOM OF STACK
T: BOTTOM OF STACK <\)> <\+>
E': BOTTOM OF STACK <\)>
F: <\+> <\)> BOTTOM OF STACK <\*>
T': <\+> <\)> BOTTOM OF STACK

VARIABLE         BOTTOM OF STACK  <\+>             <\*>             <\(>             <\)>             <id>
E                error            error            error            E -> T E'        error            E -> T E'
T                error            error            error            T -> F T'        error            T -> F T'
E'               E' -> EPSILON    E' -> <\+> T E'  error            error            E' -> EPSILON    error
F                error            error            error            F -> <\(> E <\)> error            F -> <id>
T'               T' -> EPSILON    T' -> EPSILON    T' -> <\*> F T'  error            T' -> EPSILON    error
[       OK ] ParserTest.isMakeTableCorrect4_4 (0 ms)
[ RUN      ] ParserTest.isParseCorrect1_0
VARIABLE         BOTTOM OF STACK  <a>              <b>
S                error            S -> <a> A       error
A                A -> EPSILON     error            A -> <b>
Tokenized ["aaa bbb a"]:
Tokens:
a: <a>
a: <a>
a: <a>
b: <b>
b: <b>
b: <b>
a: <a>

This input string is expected to be rejected.
rule: S -> <a> A
Symbol matched: <a>
ERROR: No entry of rule at position 1. REJECT INPUT STRING.
Current elements in stack (bottom to top):
BOTTOM OF STACK, A,
Remaining unparsed input string:
<a>, <a>, <b>, <b>, <b>, <a>, BOTTOM OF STACK,
[       OK ] ParserTest.isParseCorrect1_0 (0 ms)
[ RUN      ] ParserTest.isParseCorrect1_1
VARIABLE         BOTTOM OF STACK  <a>              <b>
S                error            S -> <a> A       error
A                A -> EPSILON     error            A -> <b>
Tokenized["  a b   "]:
Tokens:
a: <a>
b: <b>

rule: S -> <a> A
Symbol matched: <a>
rule: A -> <b>
Symbol matched: <b>
Symbol matched: BOTTOM OF STACK

INPUT ACCEPTED
[       OK ] ParserTest.isParseCorrect1_1 (0 ms)
[ RUN      ] ParserTest.isParseCorrect2_0
VARIABLE         BOTTOM OF STACK  <\+>             <\*>             <\(>             <\)>             <[0-9]+>
E                error            error            error            E -> T A         error            E -> T A
T                error            error            error            T -> F B         error            T -> F B
A                A -> EPSILON     A -> <\+> T A    error            error            A -> EPSILON     error
B                B -> EPSILON     B -> EPSILON     B -> <\*> F B    error            B -> EPSILON     error
F                error            error            error            F -> <\(> E <\)> error            F -> N
N                error            error            error            error            error            N -> <[0-9]+>
Tokenized["1+2+3+"]:
This string is expected to be rejected.
Tokens:
1: <[0-9]+>
+: <\+>
2: <[0-9]+>
+: <\+>
3: <[0-9]+>
+: <\+>

rule: E -> T A
rule: T -> F B
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> EPSILON
rule: A -> <\+> T A
Symbol matched: <\+>
rule: T -> F B
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> EPSILON
rule: A -> <\+> T A
Symbol matched: <\+>
rule: T -> F B
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> EPSILON
rule: A -> <\+> T A
Symbol matched: <\+>
ERROR: No entry of rule at position 6. REJECT INPUT STRING.
Current elements in stack (bottom to top):
BOTTOM OF STACK, A, T,
Remaining unparsed input string:
BOTTOM OF STACK,

[       OK ] ParserTest.isParseCorrect2_0 (0 ms)
[ RUN      ] ParserTest.isParseCorrect2_1
VARIABLE         BOTTOM OF STACK  <\+>             <\*>             <\(>             <\)>             <[0-9]+>
E                error            error            error            E -> T A         error            E -> T A
T                error            error            error            T -> F B         error            T -> F B
A                A -> EPSILON     A -> <\+> T A    error            error            A -> EPSILON     error
B                B -> EPSILON     B -> EPSILON     B -> <\*> F B    error            B -> EPSILON     error
F                error            error            error            F -> <\(> E <\)> error            F -> N
N                error            error            error            error            error            N -> <[0-9]+>
Tokenized["423*384*23"]:
This string is expected to be accepted.
Tokens:
423: <[0-9]+>
*: <\*>
384: <[0-9]+>
*: <\*>
23: <[0-9]+>

rule: E -> T A
rule: T -> F B
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> <\*> F B
Symbol matched: <\*>
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> <\*> F B
Symbol matched: <\*>
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> EPSILON
rule: A -> EPSILON
Symbol matched: BOTTOM OF STACK

INPUT ACCEPTED

[       OK ] ParserTest.isParseCorrect2_1 (0 ms)
[ RUN      ] ParserTest.isParseCorrect2_2
VARIABLE         BOTTOM OF STACK  <\+>             <\*>             <\(>             <\)>             <[0-9]+>
E                error            error            error            E -> T A         error            E -> T A
T                error            error            error            T -> F B         error            T -> F B
A                A -> EPSILON     A -> <\+> T A    error            error            A -> EPSILON     error
B                B -> EPSILON     B -> EPSILON     B -> <\*> F B    error            B -> EPSILON     error
F                error            error            error            F -> <\(> E <\)> error            F -> N
N                error            error            error            error            error            N -> <[0-9]+>
Tokenized["(33+34)*45/32+8*(3*1+3)"]:
This string is expected to be rejected for containing illegal symbol '/'.
Tokens:
(: <\(>
33: <[0-9]+>
+: <\+>
34: <[0-9]+>
): <\)>
*: <\*>
45: <[0-9]+>
ERROR: Invalid token: /ERROR: No entry of rule at position 0. REJECT INPUT STRING.
Current elements in stack (bottom to top):
BOTTOM OF STACK, E,
Remaining unparsed input string:
BOTTOM OF STACK, <\+>, <\*>, <\(>, <\)>, <id>,

[       OK ] ParserTest.isParseCorrect2_2 (0 ms)
[ RUN      ] ParserTest.isParseCorrect2_21
VARIABLE         BOTTOM OF STACK  <\+>             <\*>             <\(>             <\)>             <[0-9]+>
E                error            error            error            E -> T A         error            E -> T A
T                error            error            error            T -> F B         error            T -> F B
A                A -> EPSILON     A -> <\+> T A    error            error            A -> EPSILON     error
B                B -> EPSILON     B -> EPSILON     B -> <\*> F B    error            B -> EPSILON     error
F                error            error            error            F -> <\(> E <\)> error            F -> N
N                error            error            error            error            error            N -> <[0-9]+>
Tokenized["(33+34)*45*32+8*(3*1+3)"]:
This string is expected to be accepted.
Tokens:
(: <\(>
33: <[0-9]+>
+: <\+>
34: <[0-9]+>
): <\)>
*: <\*>
45: <[0-9]+>
*: <\*>
32: <[0-9]+>
+: <\+>
8: <[0-9]+>
*: <\*>
(: <\(>
3: <[0-9]+>
*: <\*>
1: <[0-9]+>
+: <\+>
3: <[0-9]+>
): <\)>

rule: E -> T A
rule: T -> F B
rule: F -> <\(> E <\)>
Symbol matched: <\(>
rule: E -> T A
rule: T -> F B
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> EPSILON
rule: A -> <\+> T A
Symbol matched: <\+>
rule: T -> F B
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> EPSILON
rule: A -> EPSILON
Symbol matched: <\)>
rule: B -> <\*> F B
Symbol matched: <\*>
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> <\*> F B
Symbol matched: <\*>
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> EPSILON
rule: A -> <\+> T A
Symbol matched: <\+>
rule: T -> F B
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> <\*> F B
Symbol matched: <\*>
rule: F -> <\(> E <\)>
Symbol matched: <\(>
rule: E -> T A
rule: T -> F B
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> <\*> F B
Symbol matched: <\*>
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> EPSILON
rule: A -> <\+> T A
Symbol matched: <\+>
rule: T -> F B
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> EPSILON
rule: A -> EPSILON
Symbol matched: <\)>
rule: B -> EPSILON
rule: A -> EPSILON
Symbol matched: BOTTOM OF STACK

INPUT ACCEPTED

[       OK ] ParserTest.isParseCorrect2_21 (0 ms)
[ RUN      ] ParserTest.isParseCorrect2_3
VARIABLE         BOTTOM OF STACK  <\+>             <\*>             <\(>             <\)>             <[0-9]+>
E                error            error            error            E -> T A         error            E -> T A
T                error            error            error            T -> F B         error            T -> F B
A                A -> EPSILON     A -> <\+> T A    error            error            A -> EPSILON     error
B                B -> EPSILON     B -> EPSILON     B -> <\*> F B    error            B -> EPSILON     error
F                error            error            error            F -> <\(> E <\)> error            F -> N
N                error            error            error            error            error            N -> <[0-9]+>
Tokenized["(33+34)*45(32+8*(3*1+3)"]:
This string is expected to be rejected for unpaired brakets.
Tokens:
(: <\(>
33: <[0-9]+>
+: <\+>
34: <[0-9]+>
): <\)>
*: <\*>
45: <[0-9]+>
(: <\(>
32: <[0-9]+>
+: <\+>
8: <[0-9]+>
*: <\*>
(: <\(>
3: <[0-9]+>
*: <\*>
1: <[0-9]+>
+: <\+>
3: <[0-9]+>
): <\)>

rule: E -> T A
rule: T -> F B
rule: F -> <\(> E <\)>
Symbol matched: <\(>
rule: E -> T A
rule: T -> F B
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> EPSILON
rule: A -> <\+> T A
Symbol matched: <\+>
rule: T -> F B
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
rule: B -> EPSILON
rule: A -> EPSILON
Symbol matched: <\)>
rule: B -> <\*> F B
Symbol matched: <\*>
rule: F -> N
rule: N -> <[0-9]+>
Symbol matched: <[0-9]+>
ERROR: No entry of rule at position 7. REJECT INPUT STRING.
Current elements in stack (bottom to top):
BOTTOM OF STACK, A, B,
Remaining unparsed input string:
<\(>, <[0-9]+>, <\+>, <[0-9]+>, <\*>, <\(>, <[0-9]+>, <\*>, <[0-9]+>, <\+>, <[0-9]+>, <\)>, BOTTOM OF STACK,

[       OK ] ParserTest.isParseCorrect2_3 (0 ms)
[----------] 19 tests from ParserTest (6 ms total)

[----------] Global test environment tear-down
[==========] 19 tests from 1 test suite ran. (6 ms total)
[  PASSED  ] 19 tests.
